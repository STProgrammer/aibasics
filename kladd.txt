import unittest
from BinaryTree import BinaryTree
from BinaryTreeNode import BinaryTreeNode
from collections import namedtuple

'''
BinaryTree klassen fungerer ikke så godt med named tuples.
Den er kanskje bare god for String verdier.
'''

class BinaryTreeTest(unittest.TestCase):
    def setUp(self):
        self.person = namedtuple('person', ['lastname', 'firstname', 'address',
                                            'postal_code', 'city'])
        self.binarytree1 = BinaryTree()
        self.content1 =  [
                    'KRISTIANSEN;MORTEN KRISTIAN;LEINAHYTTA 36;7224;MELHUS',
                    'OLDERVIK;SHARI LILL;KRÆKA 84;5948;FEDJE',
                    'GJERSTAD;TORKJELL;HOSTELAND 2 83;1361;ØSTERÅS',
                    'VESTLY SKIVIK;JAHN FREDRIK;LINNGÅRD 22;1451;NESODDTANGEN',
                    'NYMANN;ROY-ØYSTEIN;HÅNESET 77;7033;TRONDHEIM',
                    'ØYFOSS;ØISTEIN;ORHEIM 76;0367;OSLO',
                    'SKARSHAUG;ASBJØRN HARALD;ALAPMO 72;7290;STØREN',
                    'ØSTBY;FRANK;WÅRSETH 57;7414;TRONDHEIM',
                    'LINNERUD;JOHNNY;LÆRUM MELLEM 50;6507;KRISTIANSUND N',
                    'REMLO;KIM ANDRE;SANDFLATA 71;5648;HOLMEFJORD',
                    'ELI;RITA HELEN;MEHEIAVEGEN 80;4436;GYLAND',
                    'ADOLFSEN;HACI;VEDVIKA 94;1431;ÅS',
                    'HANSNES;ALF-EDVART;FJÆRLIA 43;0349;OSLO',
                    'TUVEN;FREDRIK FJELD;JERVESTIEN 48;2822;BYBRUA',
                    'MØRSVIK;RITA IREN;RØEDSLETTA I 98;4460;MOI',
                    'KVILE;JAN;THOMASBRINKEN 56;3002;DRAMMEN',
                    'GRØTTER;ANJA;KVAMSLIVEGEN 111;8430;MYRE',
                    'MIKALSEN;BJØRN HARALD;KONGELLIA 63;3519;HØNEFOSS',
                    'HUSBY;DAG HELGE;VALDE 32;4353;KLEPP STASJON',
                    'HUSBY;ASLE ANDRE;SANDEID.(LOFTHUS,NJELL) 9;8372;GRAVDAL',
                    'HUSBY;ERNST-GUNNAR;BITERUDVEIEN 116;7051;TRONDHEIM',
                    'HUSBY;EVA HARRIET;JULIHAUGEN 24;9846;TANA',
                    'HUSBY;GEIR ARNE;KIVI 25;7470;BREKKEBYGD',
                    'HUSBY;GEIR-ARNE;GUNNERUDVEGEN 24;6483;ONA',
                    'HUSBY;GUDMUND;WARGBU 26;5498;MATRE',
                    'AAKVIK;ANETTE;BAKLIEN 11;1360;NESBRU',
                    'NORBAKK;LEIF HARALD;BONESVEIEN 63;6942;SVORTEVIK',
                    'GRØNN;KARI;HELLEBERG 105;7620;SKOGN',
                    'LAUPSTAD;KEN INGE;MØLLEHAUGEN 31;9413;REINSTAD',
                    'SLOGVIK;BERNT-OLE;SKULEHEIM 46;5148;FYLLINGSDALEN',
                    'ADOLFSEN;ANN-CHRISTIN;MONSSTUEN 53;6847;VASSENDEN',
                    'WOLD;KARL-EIRIK;RYDNINGEN NEDRE 52;2211;KONGSVINGER',
                    'DOKIC;UNNI HANSEN;ASPESLETTEN SØNDRE 81;2306;HAMAR',
                    'EGGJA;DANA LENA KRISTINA;LÆRUM 111;9276;TROMSØ',
                    'RØKENES;TERJE GEORG;MINDEBAKKEN 56;2434;JØMNA',]
        for p in self.content1:
            self.binarytree1.insert(value = self.person(*p.split(';')))
        self.size1 = len(self.content1)
        #Data to make unbalanced binary tree
        self.content2 = ['MARKUSSEN;ANNE;GAUTEVARDEN 24;2404;ELVERUM',
                    'MARKUSSEN;ANNA;FURUKROK 23;7530;MERÅKER',
                    'MARIDAL;ØYSTEIN ANDRE;GULSET TERRASSE 59;7054;RANHEIM',
                    'MARIDAL;WEIJIAN;TEIGJORDET 56;7585;ELVARLI',
                    'MANJOSSOV;TOVE JORUN EIDE;SÆTERÅSEN 11;3926;PORSGRUNN',
                    'MANJOSSOV;TROND-ESPEN;VÅGSGATA 36;4017;STAVANGER',
                    'MANJOSSOV;UNNI MERETHE;BURSTUEN 85;3535;KRØDEREN',
                    'MARHAUG;VIDAR;ØDELI 69;2688;LOM',
                    'MARHAUG;VIDAR;MOENSTUBBEN 38;4329;SANDNES',
                    'MARHAUG;VIATCHESLAV;STRØMSBU TERRASSE 62;7037;TRONDHEIM',
                    'MANNVIK;TIM;ONKENHAUG 58;7350;BUVIKA',
                    'MANNVIK;SVEIN-INGVAR;SPRETTEDALEN 82;5774;LOFTHUS',
                    'MANNVIK;STEIN ROAR;ANFINNSTOVA 27;7230;KVENVÆR',
                    'MANNVIK;SIGRID;LØKSTAD 66;3223;SANDEFJORD',
                    'MANNVIK;TOR-ARNE;ÅRSETHAUGEN 51;8009;BODØ',
                    'MANNVIK;TRULS MAGNE;RENDALEN 112;4974;SØNDELED',
                    'MANNVIK;VARATHARAJAN;SKREDLUND 12;8042;BLIKSVÆR',
                    'MARKUSSEN;ARNFINN JOHAN;TVARA NEDRE 113;1870;ØRJE',
                    'MARKUSSEN;BENT;GUDBRANDS VEI 84;2652;SVINGVOLL',
                    'MARKUSSEN;BJØRN ROGER;BLOMTUN 60;7670;INDERØY',
                    'MARTUSHOV;GRO BEATE;LÆRUM ØSTRE 46;5718;MYRDAL',
                    'MARTUSHOV;FRITS ANDRE;URETRÆ 15;6380;TRESFJORD',
                    'MARTUSHOV;EVA HARRIET;SUNDBY MELLEM 22;5032;MINDE',
                    'MARTINUSSEN;KARL-ARNE;TYRIHAUGEN 26;2671;OTTA',
                    'MARTINUSSEN;KIRSTI ANJA JACOBSEN;DRAGSNO 45;4395;HOMMERSÅK',
                    'MARTINUSSEN;KRISTER;MALI FURUNES VEG 44;4505;MANDAL',
                    'MARTNES;ROALD;PEDER RISTVEDTS VEI 93;0367;OSLO',
                    'MARTNES;RUBEN;BIEVEIEN 51;5178;LODDEFJORD',
                    'MARTNES;RUNE HÅVARD;JÅTTÅHAGEN 55;5995;YTRØYGREND',
                    'MARTNES;RUTH INGUNN;VASENDEN 32;5222;NESTTUN',
                    'MARTNES;PER NORVALD;SVARTISGATA 52;8516;NARVIK',
                    'MARTNES;PER KÅRE;ONSTAD NORDRE 1;5001;BERGEN',
                    'MARTNES;PER ATLE;OLSAKER 85;7418;TRONDHEIM',]
        self.binarytree2 = BinaryTree()
        for p in self.content2:
            self.binarytree2.insert(value = self.person(*p.split(';')))
        self.size2 = len(self.content2)
        
    def test_findMin(self):
        min_value = self.person('AAKVIK', 'ANETTE', 'BAKLIEN 11', '1360', 'NESBRU')
        node = BinaryTreeNode(min_value)
        self.assertEqual(node, self.binarytree1.findMin())
    
    def test_findMax(self):
        max_value = self.person('ØYFOSS', 'ØISTEIN', 'ORHEIM 76', '0367', 'OSLO')
        node = BinaryTreeNode(max_value)
        self.assertEqual(node, self.binarytree1.findMax())
    
    def test_find(self):
        for p in self.content1:
            person = self.person(*p.split(';'))
            node = BinaryTreeNode(person)
            self.assertEqual(node, self.binarytree1.find(person))
        for p in self.content2:
            person = self.person(*p.split(';'))
            node = BinaryTreeNode(person)
            self.assertEqual(node, self.binarytree2.find(person))
    
    def test_find_key_not_found(self):
        for p in self.content1:
            person = self.person(*p.split(';'))
            with self.assertRaises(KeyError):
                self.binarytree1.find(person)
        for p in self.content2:
            person = self.person(*p.split(';'))
            with self.assertRaises(KeyError):
                self.binarytree2.find(person)
    
    def test_find_in_empty_tree(self):
        tree = BinaryTree()
        value = self.person('SKARSHAUG','ASBJØRN HARALD', 'ALAPMO 72', '7290', 'STØREN')
        self.assertEqual(None, tree.find(value))

    def test_deleteMin(self):
        contents = sorted(self.content1)
        for p in contents:
            person = self.person(*p.split(';'))
            node = BinaryTreeNode(person)
            self.assertEqual(node, self.binarytree1.deleteMin())
        contents = sorted(self.content2)
        for p in contents:
            person = self.person(*p.split(';'))
            node = BinaryTreeNode(person)
            self.assertEqual(node, self.binarytree2.deleteMin())

    def test_deleteMin_root(self):
        btree = BinaryTree()
        min_value = self.person('AAKVIK', 'ANNE-MARIT', 'RISØYVEGEN 17', '1705', 'SARPSBORG')
        btree.insert(value = min_value)
        btree.insert(value = self.person('Zero', 'Zero', 'Zero street', '1234', 'ZeroCity'))
        btree.insert(value = self.person('AAAAAA', 'AAAAA', 'AA street', '1234', 'AACity'))
        btree.deleteMin()
        btree.deleteMin()
        self.assertEqual(None, btree.find(min_value))
    
    def test_deleteMax(self):
        contents = reversed(sorted(self.content1))
        for p in contents:
            person = self.person(*p.split(';'))
            node = BinaryTreeNode(person)
            self.assertEqual(node, self.binarytree1.deleteMax())
        contents = reversed(sorted(self.content2))
        for p in contents:
            person = self.person(*p.split(';'))
            node = BinaryTreeNode(person)
            self.assertEqual(node, self.binarytree2.deleteMax())
            
    
    def test_deleteMax_root(self):
        btree = BinaryTree()
        value1 = self.person('Zero', 'Zero', 'Zero street', '1234', 'ZeroCity')
        value2 = self.person('AAKVIK', 'ANNE-MARIT', 'RISØYVEGEN 17', '1705', 'SARPSBORG')
        value3 = self.person('AAAAAA', 'AAAAA', 'AA street', '1234', 'AACity')
        btree.insert(value = value2)
        btree.insert(value = value1)
        btree.insert(value = value3)
        btree.deleteMax();
        self.assertEqual(None, btree.find(value3))


    def test_delete(self):
        '''
        test_cases = [
           'HUSBY;DAG HELGE;VALDE 32;4353;KLEPP STASJON',
           'AAKVIK;ANNE-MARIT;RISØYVEGEN 17;1705;SARPSBORG',
           'FLATEBØ;PREBEN;EIKETUN 39;9170;LONGYEARBYEN',
           'KRISTIANSEN;MORTEN KRISTIAN;LEINAHYTTA 36;7224;MELHUS',
           'ØYFOSS;WERNER STENVOLD;KIRKVOLL 28;5935;LAVIK',
        ]
        '''
        test_cases = self.content1
        for p in test_cases:
            value = self.person(*p.split(';'))
            node = BinaryTreeNode(value)
            with self.subTest():
                self.assertEqual(node, self.binarytree1.delete(value))
                #This loop is to test if all other values still exists after delete
                treesize = 0
                for p in self.content1:
                    person = self.person(*p.split(';'))
                    if None != self.binarytree1.find(person):
                        treesize += 1
                self.assertEqual(treesize , self.size1 - 1)
        
    
    def test_delete_unbalanced(self):
        '''
        test_cases = [
           'MANJOSSOV;UNNI MERETHE;BURSTUEN 85;3535;KRØDEREN',
           'MARHAUG;VIDAR;ØDELI 69;2688;LOM',
           'MANNVIK;TRULS MAGNE;RENDALEN 112;4974;SØNDELED',
           'MARTNES;PER KÅRE;ONSTAD NORDRE 1;5001;BERGEN',
           'MANJOSSOV;UNNI MERETHE;BURSTUEN 85;3535;KRØDEREN',       
        ]
        '''
        test_cases = self.content2
        for p in test_cases:
            value = self.person(*p.split(';'))
            node = BinaryTreeNode(value)
            with self.subTest():
                self.assertEqual(node, self.binarytree2.delete(value))
                #This loop is to test if all other values still exists after delete
                treesize = 0
                for p in self.content2:
                    person = self.person(*p.split(';'))
                    if None != self.binarytree2.find(person):
                        treesize += 1
                self.assertEqual(treesize , self.size2 - 1)
    
    def test_delete_left_tree(self):
        btree = BinaryTree()
        value1 = self.person('AAKVIK', 'ANNE-MARIT', 'RISØYVEGEN 17', '1705', 'SARPSBORG')
        value2 = self.person('AAJVIK', 'ANNE-MARIT', 'RISØYVEGEN 17', '1705', 'SARPSBORG')
        value3 = self.person('AAIVIK', 'ANNE-MARIT', 'RISØYVEGEN 17', '1705', 'SARPSBORG')
        btree.insert(value=value1); btree.insert(value=value2); btree.insert(value=value3)
        node = BinaryTreeNode(value1)
        self.assertEqual(node, btree.delete(value1))
        node = BinaryTreeNode(value2)
        self.assertEqual(node, btree.find(value2))
        node = BinaryTreeNode(value3)
        self.assertEqual(node, btree.find(value3))
        
    def test_delete_single_value(self):
        btree = BinaryTree()
        value1 = self.person('AAKVIK', 'ANNE-MARIT', 'RISØYVEGEN 17', '1705', 'SARPSBORG')
        btree.insert(value = value1);
        btree.delete(value1)
        node = BinaryTreeNode(value1)
        self.assertNotEqual(node, btree.find(value1))

    def test_insert_value(self):
        btree1 = BinaryTree()
        for p in self.content1:
            person = self.person(*p.split(';'))
            node = BinaryTreeNode(person)
            self.assertEqual(node, btree1.insert(value = person))
        btree2 = BinaryTree()
        for p in self.content2:
            person = self.person(*p.split(';'))
            node = BinaryTreeNode(person)
            self.assertEqual(node, btree2.insert(value = person))
    
    def test_insert_node(self):
        value1 = self.person('WIKILUND','JOHAN', 'SVETUN 11', '8510', 'NARVIK')
        node1 = BinaryTreeNode(value1)
        value2 = self.person('ALFRED', 'POLLEN', 'gate 11', '1234', 'KONGSBERG')
        node2 = BinaryTreeNode(value2)
        self.assertEqual(node1, self.binarytree2.insert(treenode=node1))
        self.assertEqual(node2, self.binarytree2.insert(treenode=node2))
        for p in self.content2:
            person = self.person(*p.split(';'))
            node = BinaryTreeNode(person)
            self.assertEqual(node, self.binarytree2.find(person))
    
    
    def test_insert_to_empty_tree(self):
        btree = BinaryTree(None)
        person = self.person('WIKILUND','JOHAN', 'SVETUN 11', '8510', 'NARVIK')
        node = BinaryTreeNode(person)
        self.assertEqual(node, btree.insert(value=person))
        
    def test_insert_node_to_empty_tree(self):
        btree = BinaryTree(None)
        person = self.person('WIKILUND','JOHAN', 'SVETUN 11', '8510', 'NARVIK')
        node = BinaryTreeNode(person)
        self.assertEqual(node, btree.insert(treenode=node))


    def test_insert_duplicate(self):
        person = self.person('AAKVIK', 'ANNE-MARIT', 'RISØYVEGEN 17', '1705', 'SARPSBORG')
        with self.assertRaisesRegex(Exception, "Duplicate key"):
            self.binarytree1.insert(value = person)
        
    
    def test_insert_None_value(self):
        with self.assertRaisesRegex(Exception, "Attempt to insert an empty space into Binary Tree"):
            self.binarytree1.insert(value = None)


    def test_insert_empty_node(self):
        node = BinaryTreeNode(None)
        with self.assertRaisesRegex(Exception, "Attempt to insert an Node into Binary Tree with no key value"):
            self.binarytree1._getnodes(treenode = node)

        


if __name__ == '__main__':
    import sys;sys.argv = ['', 'BinaryTreeTest']
    unittest.main()